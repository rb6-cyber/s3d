  ___________________________________________________________________________
 /                                                                           \
|       libs3d documentation                                                  |
 \___________________________________________________________________________/

14.03.06: PLEASE NOTE

- This Document is slightly outdated, I would like to create a HTML/man page for this
  -> see OPEN_PROBLEMS

this is just a plain raw text documentatio of the libs3d api. maybe i'll do 
some docbook version later :) please beware: anything may change anytime,
as i'm sometimes in the mood of changing deep internal things. 
if you miss something, just drop me a line <dotslash@packetmixer.de> :)

------- instructions ----------------------------------------------------------

instructions:
include the s3d-header with

#include <s3d.h>

make sure that the s3d.h file is in your include path. you can either use
dynamic linking with the libs3d.so (/dll?!) or statically with the libs3d.a
file.
------- data types ------------------------------------------------------------

struct mcp_object 
{
	unsigned long object;
	float trans_x,trans_y,trans_z;
//	char event;
#define MCP_NEW_OBJECT	1
	char name[256]; 
}

this is the structure of an event->buf of a S3D_MCP_OBJECT type. it gives 
infromation about the virtual object which is in fact a logged in application.

_______________________________________________________________________________

typedef void (*s3d_cb)(struct s3d_evt *);

the callback definition. each callback-functions takes a struct s3d_evt 
pointer as argument. it will contain the information what actually happened
(e.g which key was pressed, which object was clicked etc)

------- constants -------------------------------------------------------------

#define S3D_EVENT_OBJ_CLICK		1

an object got clicked. the buffer contains a 4byte unsigned long number which
is the object id. of the clicked object.

#define S3D_EVENT_KEY			2

a key has been pressed. contains a 2byte unsigned short keycode.

#define S3D_MCP_OBJECT			17

information about a virtual object. only an mcp will receive this.

#define S3D_MCP_DEL_OBJECT		18

a virtual object disappeared. (e.g. the app logged out)

#define	S3D_OF_VISIBLE		0x00000001

the object can be seen.

#define	S3D_OF_SELECTABLE	0x00000002

the object can be clicked.

------- functions -------------------------------------------------------------

int s3d_init(int *argc, char ***argv, char *name);

initializes the s3dlibrary, builds the connection to the server and does some
internal stuff. the argc/argv pointer can be given from 
main(int argc, char *argv[])

example:

int main(int argc, char *argv[])
{
	s3d_init(&argc,&argv,"my program");
	...
_______________________________________________________________________________


int s3d_quit();

closes the connection and cleares the event-stack. it can also be used to leave
the s3d_mainloop

_______________________________________________________________________________


int s3d_mainloop(void (*f)());

takes a function as argument. it will loop this function until a quit-event is 
received. you can pass NULL if you have no function to be looped, but its
better to sleep some time if you have nothing to do anyway to save cpu-time.

example:

void mainloop()
{
	usleep(1000); // sleep 1 ms in every cycle
}
...

	s3d_mainloop(mainloop();

_______________________________________________________________________________

int s3d_push_vertex(int object, float x, float y, float z);

pushes a vertex onto the vertex stack. make sure that you count how many
vertices you've pushed because you'll need that for referencing when you push
your polygons.

_______________________________________________________________________________

int s3d_push_vertex_array(int object, float *vbuf, unsigned short n);

push some vertices from an array. that's much better for performing than
using s3d_push_vertex() if you have a lot of vertices (and that's probably the 
usual case).

example:

	float vertices[] = { 0.0, 0.0, 0.0,
						 1.0, 2.0, 3,0,
						 3.0, 2.0, 1.0};
	s3d_push_vertex_array(object, vertices, 3); // pushing 3 vertices

_______________________________________________________________________________

int s3d_push_material( int object, 
						float amb_r, float amb_g, float amb_b,
						float spec_r, float spec_g, float spec_b,
						float diff_r, float diff_g, float diff_b
						);

pushes a material for an object. you will have to count them yourself too, as
polygons will ask for the material index number. the material properties are
given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 
1.0 is the maximum a color value can be. 
the specular color is the color which is directly reflected from the light
source. the diffuse color is the color which can be seen in the bright side
of the object, and the ambience color is the color of the shadow side of the
object.

_______________________________________________________________________________

int s3d_push_polygon(int object, int v1, int v2, int v3, int material);

push one polygon on the polygonstack of the object. it takes 3 vertex-index-
numbers and one material material-index-nr. as argument.

example:
	int oid=s3d_new_object();	// create a new object
	s3d_push_vertex(oid,0.0,0.0,0.0);
	s3d_push_vertex(oid,0.0,1.0,0.0);
	s3d_push_vertex(oid,1.0,0.0,0.0);
	s3d_push_material(oid,0.3,0.0,0.0, 1.0,1.0,1.0, 1.0,0.0,0.0);
	s3d_push_polygon(oid,0,1,2,0);
	// this will create a red polygon

_______________________________________________________________________________

int s3d_push_polygon_array(int object, unsigned long *pbuf, unsigned short n);

as for vertices, you can push arrays of polygons to have greater performance.
the pbuf should contain n polygons which consist of 4 unsigned long values
of 3 vertices indeces and 1 material index.

example:
	unsigned long pbuf[] = { 0,1,2,0};
	int oid=s3d_new_object();	// create a new object
	s3d_push_vertex(oid,0.0,0.0,0.0);
	s3d_push_vertex(oid,0.0,1.0,0.0);
	s3d_push_vertex(oid,1.0,0.0,0.0);
	s3d_push_material(oid,0.3,0.0,0.0, 1.0,1.0,1.0, 1.0,0.0,0.0);
	s3d_push_polygon_array(oid,pbuf,1);
	// push one polygon with the pbuf data

_______________________________________________________________________________

int s3d_pop_vertex(int object, unsigned short n);
int s3d_pop_polygon(int object, unsigned short n);
int s3d_pop_material(int object, unsigned short n);

deletes the latest n vertices/polygons/materials from the vertex/polygon/
material stack

_______________________________________________________________________________

int s3d_new_object();

creates a new object, returning the object id.

_______________________________________________________________________________

int s3d_del_object(unsigned long oid);

deletes the object referenced by oid.

_______________________________________________________________________________

int s3d_clone_object(unsigned long oid);

clones an already exisiting object. they get just look the same as the 
parent-object and will change when the parent-object changes.
cloning especially makes sense if you want to use the same object a lot of
times. move and transform is independent from the parent.
the function returns child's object id.

_______________________________________________________________________________

int s3d_change_clone_target(unsigned long oid, unsigned long toid);

changes the clone target to another object.

_______________________________________________________________________________

int s3d_link(unsigned long oid_from, unsigned long oid_to);

a linked object will move along with it's link parent. for example if you have
a book on a table, you can link the book to the table so the book will 
"keep on the table" if you move the table around in space.
it will also rotate with the table.

_______________________________________________________________________________

int s3d_unlink_object(unsigned long oid);

remove the link to the parent.

_______________________________________________________________________________

int s3d_import_3ds_file(char *fname);

imports a 3ds-file, returning the object id of the loaded file. fname should
be the path to the 3ds-file.

_______________________________________________________________________________

int s3d_import_3ds(char *buf);

imports a 3ds-file from memory.

_______________________________________________________________________________

int s3d_open_file(char *fname, char **pointer);

this opens the file fname, setting *pointer to it's memory position. the
function will return the size of buffer. you can free() the pointer when
you're finished.

_______________________________________________________________________________

int s3d_select_font(char *mask);

this selects a font for the s3d_draw_string() function. 

example:

	s3d_select_font("vera");
	// will use the vera font face

_______________________________________________________________________________

int s3d_draw_string( char *str,float *len);

renders the string str with len in truetype format with the height 1, returns
the length of the string rendered in *len (or set len=NULL to disable this)

example:
	
	char str="hello world!";
	float len;
	s3d_select_font("vera");
	s3d_draw_string(str,len);

	/* not interested in the length? do that:
	 * s3d_draw_string(str,NULL); */

_______________________________________________________________________________

int s3d_flags_on(int object, unsigned long flags);

put some flags on for an object.

!!! HINT:
if you don't toggle OF_VISIBLE on, you won't see your object. usually you want
this.

_______________________________________________________________________________

int s3d_flags_off(int object, unsigned long flags);

turns some flags off.
_______________________________________________________________________________

int s3d_translate(int object, float x, float y, float z);

move the object to some position in space. when you create an object, it's 
always located at 0.0,0.0,0.0

_______________________________________________________________________________

int s3d_rotate(int object, float x, float y, float z);

rotate an object around the x, y and z-axis respectively. 

_______________________________________________________________________________

int s3d_scale(int object, float x, float y, float z);

enlarge an object about the factor of x, y, z for each axis respectively.

_______________________________________________________________________________

float s3d_get_radius(unsigned long oid);

get the radius the sphere which would exactly enclose the object.
this is useful to get the size of an object, but is slow as it needs 
interaction with the server (maybe i'll remove this function later ...).

_______________________________________________________________________________

void s3d_push_event(struct s3d_evt *newevt);

push an event onto the event-stack. usually you don't need to do this manually

_______________________________________________________________________________

struct s3d_evt *s3d_pop_event();

pops the latest event from the stack. don't forget to free() it's buffer 
and the event itself.

_______________________________________________________________________________

struct s3d_evt *s3d_find_event(unsigned char event);

finds an the latest occurence of an event, giving the event type as argument.

_______________________________________________________________________________

int s3d_delete_event(struct s3d_evt *devt);

deletes an event, the argument is the pointer to the event which is to be 
deleted (maybe obtained from s3d_find_event).

_______________________________________________________________________________

void s3d_set_callback(unsigned char event, s3d_cb func);

sets a callback for a certain event. this is very useful for event-oriented 
applications. event callbacks will not interrupt each other or the mainloop.

example:

void obj_click(struct s3d_evt event)
{
	printf("object id %d got clicked", *((unsigned long *)event->buf));
}
...
	s3d_set_callback(S3D_EVENT_NEW_OBJECT, obj_click);

// this will tell you when a object got clicked

_______________________________________________________________________________

void s3d_clear_callback(unsigned char event);

clears the callback associated with event.

_______________________________________________________________________________

s3d_cb s3d_get_callback(unsigned char event);

returns the callback-function of the event.

example:
	struct s3d_evt e;
	...
	s3d_get_callback(S3D_EVENT_KEY)(e);
	// will call the key-handling function with argument e. 

_______________________________________________________________________________

void s3d_process_stack();

this function gos through all function of the event-stack and will call 
functions. this is useful when you define a new function but still have a lot 
of events of this type on the stack. 

_______________________________________________________________________________

int s3d_mcp_focus(int object);

this is an mcp-only function. it gives focus (for receiving key-strokes etc.)
to an app referenced by it's mcp-object-id. 
