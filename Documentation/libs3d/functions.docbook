<sect2 id="s3d_usage"><title>s3d_usage</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_usage</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
</para><para>Prints the possible parameter for the client library (which can be passed in s3d_init())         </para></sect2><sect2 id="s3d_init"><title>s3d_init</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_init</function></funcdef><paramdef>int *<parameter>argc</parameter>, char ***<parameter>argv</parameter>, const char *<parameter>name</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>This will initialize the s3d-library and the connection to the Server. It will return 0 on success in Server initializion. name specifies the your programs name.</para><programlisting> int main(char argc, char **argv)
 {
         if (!s3d_init(&amp;argc, &amp;argv, &quot;Hello world&quot;))
         {
                 ...
                 s3d_quit();
         }
         return(0);
 }
</programlisting><para>         </para></sect2><sect2 id="s3d_quit"><title>s3d_quit</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_quit</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
</para><para>closes the connection and cleares the event-stack. it can also be used to leave the s3d_mainloop().         </para></sect2><sect2 id="s3d_mainloop"><title>s3d_mainloop</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mainloop</function></funcdef><paramdef>void(*)(void) <parameter>f</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>takes a function as argument. it will loop this function until a quit-event is received. you can pass NULL if you have no function to be looped, but its better to sleep some time if you have nothing to do anyway to save cpu-time.</para><programlisting> void mainloop(void)
 {
         usleep(1000); // sleep 1 ms in every cycle
 }
 ...

 s3d_mainloop(mainloop());
</programlisting><para>         </para></sect2><sect2 id="s3d_push_vertex"><title>s3d_push_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertex</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>pushes a vertex onto the vertex stack. make sure that you count how many vertices you've pushed because you'll need that for referencing when you push your polygons.         </para></sect2><sect2 id="s3d_push_vertices"><title>s3d_push_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_vertices</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>vbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>push some vertices from an array. that's much better for performing than using s3d_push_vertex() if you have a lot of vertices (and that's probably the usual case). </para><programlisting> float vertices[] = { 0.0, 0.0, 0.0,
                      1.0, 2.0, 3.0,
                      3.0, 2.0, 1.0};
 s3d_push_vertices(object, vertices, 3); // pushing 3 vertices
</programlisting><para>         </para></sect2><sect2 id="s3d_push_material"><title>s3d_push_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>pushes a material for an object. you will have to count them yourself too, as polygons will ask for the material index number. the material properties are given in rgb (red/green/blue) color codes, in float. 0.0 is the minimum, 1.0 is the maximum a color value can be. the specular color is the color which is directly reflected from the light source. the diffuse color is the color which can be seen in the bright side of the object, and the ambience color is the color of the shadow side of the object.         </para></sect2><sect2 id="s3d_pep_material"><title>s3d_pep_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Overwriting the latest pushed Material, overwriting the current value with the specified one. See s3d_pep_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_push_material_a"><title>s3d_push_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_material_a</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>amb_a</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>spec_a</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter>, float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Same as s3d_push_material, but color has alpha value added. Use s3d_push_materials_a() if you have a lot of materials to push.         </para></sect2><sect2 id="s3d_push_materials_a"><title>s3d_push_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_materials_a</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>mbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Pushes a buffer of Materials. Those Materials are in the format float[n*12], with
</para><para>mbuf[n*12 + 0-3] - ambience</para><para>mbuf[n*12 + 4-7] - specular</para><para>mbuf[n *12 + 8-11] - diffusion values
</para><para>of each entry. n is the number of materials pushed. The values are in the order r,g,b,a. If you only want to push one material, use the more easy s3d_push_material_a() function.</para><programlisting> // each line has r,g,b,a value
 float bla[24]=
         {1, 0, 0, 1,
          1, 0, 0, 1,
          1, 0, 0, 1,
          0, 1, 1, 1,
          0, 1, 1, 1,
          0, 1, 1, 1};

 s3d_push_materials_a(object, mbuf, 2); // push a red and a cyan material
</programlisting><para>         </para></sect2><sect2 id="s3d_pep_material_a"><title>s3d_pep_material_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_a</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>amb_r</parameter>, float <parameter>amb_g</parameter>, float <parameter>amb_b</parameter>, float <parameter>amb_a</parameter>, float <parameter>spec_r</parameter>, float <parameter>spec_g</parameter>, float <parameter>spec_b</parameter>, float <parameter>spec_a</parameter>, float <parameter>diff_r</parameter>, float <parameter>diff_g</parameter>, float <parameter>diff_b</parameter>, float <parameter>diff_a</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Overwriting the latest pushed Material, overwriting the current value with the specified one, with alpha value in contrast to s3d_pep_material See s3d_push_materials_a if you want to pep more materials.         </para></sect2><sect2 id="s3d_pep_materials_a"><title>s3d_pep_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_materials_a</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>mbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Alters the last n pushed Materials. See s3d_push_materials_a() for more information how mbuf should look like. Use s3d_pep_material_a() if you only want to alter the latest material.         </para></sect2><sect2 id="s3d_load_materials_a"><title>s3d_load_materials_a</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_materials_a</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>mbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Loads n materials starting from index position start into the Material stack. See s3d_push_materials_a for more informatino about the values in mbuf.         </para></sect2><sect2 id="s3d_push_polygon"><title>s3d_push_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygon</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>v1</parameter>, uint32_t <parameter>v2</parameter>, uint32_t <parameter>v3</parameter>, uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>push one polygon on the polygonstack of the object. it takes 3 vertex-index numbers and one material material-index-nr. as argument.</para><programlisting> int oid = s3d_new_object();   // create a new object
 s3d_push_vertex(oid, 0.0, 0.0, 0.0);
 s3d_push_vertex(oid, 0.0, 1.0, 0.0);
 s3d_push_vertex(oid, 1.0, 0.0, 0.0);
 s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
 s3d_push_polygon(oid, 0, 1, 2, 0);
 // this will create a red polygon
</programlisting><para>         </para></sect2><sect2 id="s3d_push_polygons"><title>s3d_push_polygons</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_polygons</function></funcdef><paramdef>int <parameter>object</parameter>, const uint32_t *<parameter>pbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>as for vertices, you can push arrays of polygons to have greater performance. the pbuf should contain n polygons which consist of 4 uint32_t values of 3 vertices indices and 1 material index.</para><programlisting> uint32_t pbuf[] = { 0, 1, 2, 0};
 int oid = s3d_new_object();   // create a new object
 s3d_push_vertex(oid, 0.0, 0.0, 0.0);
 s3d_push_vertex(oid, 0.0, 1.0, 0.0);
 s3d_push_vertex(oid, 1.0, 0.0, 0.0);
 s3d_push_material(oid, 0.3, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0);
 s3d_push_polygons(oid, pbuf, 1);
 // push one polygon with the pbuf data
</programlisting><para>         </para></sect2><sect2 id="s3d_push_line"><title>s3d_push_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_line</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>v1</parameter>, uint32_t <parameter>v2</parameter>, uint32_t <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Push one line on the linestack of the object. It takes 2 vertex-index- numbers and one material material-index-nr. as argument. If you have a lot of lines to push, use s3d_push_lines()         </para></sect2><sect2 id="s3d_push_lines"><title>s3d_push_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_lines</function></funcdef><paramdef>int <parameter>object</parameter>, const uint32_t *<parameter>lbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Pushing n lines on the linestack of the object, each lbuf has a size of n*3, each entry has the index number of the first vertex, second vertex and material number just as in s3d_push_line().         </para></sect2><sect2 id="s3d_push_texture"><title>s3d_push_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint16_t <parameter>w</parameter>, uint16_t <parameter>h</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Adds a new texture with height w and height h on the texturestack.         </para></sect2><sect2 id="s3d_push_textures"><title>s3d_push_textures</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_push_textures</function></funcdef><paramdef>int <parameter>object</parameter>, const uint16_t *<parameter>tbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>As for vertices, you can push arrays of textures on the texture stack to have greater performance. The tbuf should contain n texture sizes which consist of 2 uint16_t values for width and height for each texture.         </para></sect2><sect2 id="s3d_pop_vertex"><title>s3d_pop_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_vertex</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Deletes the latest n vertices from the vertex stack of the object.         </para></sect2><sect2 id="s3d_pop_polygon"><title>s3d_pop_polygon</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_polygon</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Deletes the latest n polygon from the polygon stack of the object.         </para></sect2><sect2 id="s3d_pop_material"><title>s3d_pop_material</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_material</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Deletes the latest n material from the material stack of the object.         </para></sect2><sect2 id="s3d_pop_texture"><title>s3d_pop_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Deletes the latest n textures from the texture stack of the object.         </para></sect2><sect2 id="s3d_pop_line"><title>s3d_pop_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pop_line</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Deletes the latest n lines from the line stack of the object.         </para></sect2><sect2 id="s3d_pep_line_normals"><title>s3d_pep_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Adds normal information to lines, giving each vertex of a line a normal information. This makes lines somewhat nicer, you'll need that especially when you're going to build wireframe models.</para><para>nbuf should contain n * 6 float values, for each vertex a normal vector (x,y,z), and you have 2 Vertices for each line so that makes 6 float values per line in Total.         </para></sect2><sect2 id="s3d_pep_polygon_normals"><title>s3d_pep_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Adds normal information to polygons, giving each vertex of a polygon a normal information. With this, you can achieve smoothed edge effects.</para><para>nbuf should contain n * 9 float values, for each vertex a normal vector (x,y,z), and you have 3 Vertices for each Polygon so that makes 9 float values per Polygon in Total. Don't worry if you don't use this, it's kind of hard to calculate and the server will always use some proper normal values (same for every vertex, calculated by the plane which is defined by the 3 points of the polygon.         </para></sect2><sect2 id="s3d_pep_polygon_tex_coord"><title>s3d_pep_polygon_tex_coord</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coord</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x1</parameter>, float <parameter>y1</parameter>, float <parameter>x2</parameter>, float <parameter>y2</parameter>, float <parameter>x3</parameter>, float <parameter>y3</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Pimp the last polygon pushed with some textures coordinates, x and y values for each vertex point respectively. Those values may be between 0 and 1 and are vertex points on the texture defined in the material of the polygon. If you have more polygons which should get a texture, use s3d_pep_polygon_tex_coords()         </para></sect2><sect2 id="s3d_pep_polygon_tex_coords"><title>s3d_pep_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>tbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Pimp the latest n polygons with texture coordinates. tbuf has 6*n float values for its entries, which are supplied in the order as in s3d_pep_polygon_tex_coord()         </para></sect2><sect2 id="s3d_pep_material_texture"><title>s3d_pep_material_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_material_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>tex</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Assign the latest material a texture referenced by the index tex. Of course, you will have pushed this texture with s3d_push_texture()         </para></sect2><sect2 id="s3d_pep_vertex"><title>s3d_pep_vertex</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertex</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Alter the latest pushed vertex, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_vertices"><title>s3d_pep_vertices</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_vertices</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>vbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Alter the latest n pushed vertex. vbuf holds the values which are used to overwrite the old data, n entries with each 3 floats specifying x,y,z of the vertices.         </para></sect2><sect2 id="s3d_pep_line"><title>s3d_pep_line</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_line</function></funcdef><paramdef>int <parameter>object</parameter>, int <parameter>v1</parameter>, int <parameter>v2</parameter>, int <parameter>material</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Alter the latest pushed line, overwriting with the supplied values.         </para></sect2><sect2 id="s3d_pep_lines"><title>s3d_pep_lines</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_pep_lines</function></funcdef><paramdef>int <parameter>object</parameter>, const uint32_t *<parameter>lbuf</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Alter the latest n pushed lines. lbuf holds the values which are used to overwrite the old data, n entries with each 3 uint32_t specifying first, second vertex and material of each line.         </para></sect2><sect2 id="s3d_load_line_normals"><title>s3d_load_line_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_line_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Just as s3d_pep_line_normals(), with the difference you won't alter the latest n lines but n lines starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_normals"><title>s3d_load_polygon_normals</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_normals</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>nbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Just as s3d_pep_polygon_normals(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_polygon_tex_coords"><title>s3d_load_polygon_tex_coords</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_polygon_tex_coords</function></funcdef><paramdef>int <parameter>object</parameter>, const float *<parameter>tbuf</parameter>, uint32_t <parameter>start</parameter>, uint16_t <parameter>n</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Just as s3d_pep_polygon_tex_coords(), with the difference you won't alter the latest n polygons but n polygons starting with index start.         </para></sect2><sect2 id="s3d_load_texture"><title>s3d_load_texture</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_load_texture</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>tex</parameter>, uint16_t <parameter>xpos</parameter>, uint16_t <parameter>ypos</parameter>, uint16_t <parameter>w</parameter>, uint16_t <parameter>h</parameter>, const uint8_t *<parameter>data</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
        </para></warning></sect2><sect2 id="s3d_new_object"><title>s3d_new_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_new_object</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
</para><para>Creates a new object, returning the object id.</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
        </para></warning></sect2><sect2 id="s3d_del_object"><title>s3d_del_object</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_del_object</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Deletes the object referenced by oid.         </para></sect2><sect2 id="s3d_clone"><title>s3d_clone</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Clones an already exisiting object. They get just look the same as the parent-object and will change when the parent-object changes. Cloning especially makes sense if you want to use the same object a lot of times. Move and transform is independent from the parent. The function returns the childs object id.         </para></sect2><sect2 id="s3d_clone_target"><title>s3d_clone_target</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_clone_target</function></funcdef><paramdef>int <parameter>oid</parameter>, int <parameter>toid</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Changes the clone target of oid to another object (toid). This assumes you've got oid from s3d_clone before.         </para></sect2><sect2 id="s3d_link"><title>s3d_link</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_link</function></funcdef><paramdef>int <parameter>oid_from</parameter>, int <parameter>oid_to</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>A linked object will move along with it's link parent. For example if you have a book on a table, you can link the book to the table so the book will &quot;keep on the table&quot; if you move the table around in space. It will also rotate with the table etc.         </para></sect2><sect2 id="s3d_unlink"><title>s3d_unlink</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_unlink</function></funcdef><paramdef>int <parameter>oid</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Remove the link of object oid to its target.         </para></sect2><sect2 id="s3d_flags_on"><title>s3d_flags_on</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_on</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>turn some flags on for object.</para><warning><para>If you don't toggle OF_VISIBLE on, you won't see your object. usually you want this. (at least after you *push()d all your content) 
        </para></warning></sect2><sect2 id="s3d_flags_off"><title>s3d_flags_off</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_flags_off</function></funcdef><paramdef>int <parameter>object</parameter>, uint32_t <parameter>flags</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>turn some flags off for object.         </para></sect2><sect2 id="s3d_translate"><title>s3d_translate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_translate</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Move the object to some position in space. when you create an object, it's always located at 0.0 , 0.0, 0.0.</para><warning><para>Translation is absolute, not relative!
</para></warning><programlisting> s3d_translate(object, 2, 0, 0);
 s3d_translate(object, 4, 0, 0);
 // object will end up at 4,0,0 and not 6,0,0!!
</programlisting><para>         </para></sect2><sect2 id="s3d_rotate"><title>s3d_rotate</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_rotate</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>x</parameter>, float <parameter>y</parameter>, float <parameter>z</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>rotate an object around the x, y and z-axis respectively. x,y,z may have values between [0,360] degrees.</para><para>You will usually only rotate around one axis, leaving the unused fields on 0, I guess. If you want to rotate around more than one axis, please note: The order of the rotation applies is y-axis, x-axis, and then z-axis. You can think of it as the earth position coordinates: x is the longitude, y is the latitude, and z is the rotation at this point of the earth around your bodies axis. (I wonder if that makes it any clearer ;)</para><warning><para>Rotate is absolute, not relative!
</para></warning><programlisting> s3d_rotate(object, 90,  0, 0);
 s3d_rotate(object, 180, 0, 0);
 // object will be rotated 180 degrees around the x-axis, not 270 degress!
</programlisting><para>         </para></sect2><sect2 id="s3d_scale"><title>s3d_scale</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_scale</function></funcdef><paramdef>int <parameter>object</parameter>, float <parameter>s</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Scales the object. about factor s. s=1 will be the original size, -1 will mirror it.</para><warning><para>s=0 is forbidden and will be ignored! s3d_scale is also absolute, not relative! 
        </para></warning></sect2><sect2 id="s3d_import_model_file"><title>s3d_import_model_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_import_model_file</function></funcdef><paramdef>const char *<parameter>fname</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Imports an 3d object file and returns the object number. Quite a number of formats are supported, like 3D Studio (.3ds, .prj), Lightwave (.lw, .lwb, .lwo), Quake Models (.md3), or simply everything libg3d supports. :)</para><warning><para>Of course, you won't forget to toggle it visible, won't you? 
        </para></warning></sect2><sect2 id="s3d_open_file"><title>s3d_open_file</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_open_file</function></funcdef><paramdef>const char *<parameter>fname</parameter>, char **<parameter>pointer</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>This opens the file fname, setting *pointer to it's memory position. the function will return the size of buffer. you can free() the pointer when you're finished.         </para></sect2><sect2 id="s3d_select_font"><title>s3d_select_font</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_select_font</function></funcdef><paramdef>const char *<parameter>mask</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>This selects a font for the s3d_draw_string() function.</para><warning><para>Of course, you won't forget to toggle it visible, won't you?
</para></warning><programlisting> s3d_select_font(&quot;vera&quot;); // will use the vera font face
</programlisting><para>         </para></sect2><sect2 id="s3d_draw_string"><title>s3d_draw_string</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_draw_string</function></funcdef><paramdef>const char *<parameter>str</parameter>, float *<parameter>xlen</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Renders the string str with in Truetype format with the height 1, returns the length of the rendered string in *xlen (or set len=NULL to disable this).</para><programlisting> char str=&quot;hello world!&quot;;
 float len;
 s3d_select_font(&quot;vera&quot;);
 s3d_draw_string(str, len);

 // not interested in the length? do that: s3d_draw_string(str, NULL);
</programlisting><para>         </para></sect2><sect2 id="s3d_strlen"><title>s3d_strlen</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_strlen</function></funcdef><paramdef>const char *<parameter>str</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Returns the length of the string if it were rendered with the currently selected font. That might be useful to estimate the size used for a text and render the background or bounding box before inserting the text.         </para></sect2><sect2 id="s3d_vector_length"><title>s3d_vector_length</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_length</function></funcdef><paramdef>const float <parameter>vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
</para><para>Calculates and returns the length of the given vector (which should be of the type float[3]). More info on wikipedia http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_dot_product"><title>s3d_vector_dot_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_dot_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
</para><para>Calculates and returns the dot product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_subtract"><title>s3d_vector_subtract</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_subtract</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[], float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
</para><para>Subtracts vector1 from vector2, writing result into result_vector. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_angle"><title>s3d_vector_angle</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_vector_angle</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
</para><para>Calculates and returns the angle between vector1 and vector2. Please note that the resulting angle is between 0 and PI, therefore not covering the whole period! To convert in degrees just do result*180/M_PI. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_angle_to_cam"><title>s3d_angle_to_cam</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>float <function>s3d_angle_to_cam</function></funcdef><paramdef>const float <parameter>obj_pos</parameter>[], const float <parameter>cam_pos</parameter>[], float *<parameter>angle_rad</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Given obj_pos and cam_pos in the format float[3], angle_rad about which angle the object should be rotated around the y-axis so that it faces the camera. This might become handy if you have some text floating in space and want it to face the camera. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_vector_cross_product"><title>s3d_vector_cross_product</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_vector_cross_product</function></funcdef><paramdef>const float <parameter>vector1</parameter>[], const float <parameter>vector2</parameter>[], float <parameter>result_vector</parameter>[]</paramdef></funcprototype></funcsynopsis><para>
</para><para>Calculates and returns the cross product of vector1 and vector2. All vectors should have the format float[3]. More info on wikipedia. http://en.wikipedia.org/wiki/Vector_(spatial)         </para></sect2><sect2 id="s3d_push_event"><title>s3d_push_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_push_event</function></funcdef><paramdef>struct s3d_evt *<parameter>newevt</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Pushes an event onto the event-stack. Usually you don't need to do this manually.         </para></sect2><sect2 id="s3d_pop_event"><title>s3d_pop_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_pop_event</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
</para><para>Pops the latest event from the stack. Don't forget to free() both the event and its buffer! Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_find_event"><title>s3d_find_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>struct s3d_evt * <function>s3d_find_event</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Finds the latest occurence of an event, giving the event type as argument. Returns a pointer to struct s3d_evt.         </para></sect2><sect2 id="s3d_delete_event"><title>s3d_delete_event</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_delete_event</function></funcdef><paramdef>const struct s3d_evt *<parameter>devt</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>deletes an event, the argument is the pointer to the event which is to be deleted (maybe obtained from s3d_find_event).         </para></sect2><sect2 id="s3d_set_callback"><title>s3d_set_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_set_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter>, s3d_cb <parameter>func</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>sets a callback for a certain event. this is very useful for event-oriented applications. event callbacks will not interrupt each other or the mainloop.</para><warning><para>Defining callbacks will only work after calling s3d_init()
</para></warning><programlisting> #include &lt;inttypes.h&gt;

 void obj_click(struct s3d_evt event)
 {
         printf(&quot;object id %&quot;PRIu32&quot; got clicked&quot;, *((uint32_t *)event-&gt;buf));
 }
 ...
 s3d_set_callback(S3D_EVENT_NEW_OBJECT, obj_click);
 // this will tell you when a object got clicked
</programlisting><para>         </para></sect2><sect2 id="s3d_clear_callback"><title>s3d_clear_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_clear_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Clears the callback which is associated with the event.         </para></sect2><sect2 id="s3d_ignore_callback"><title>s3d_ignore_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_ignore_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Sets the callback on ignore, that means it won't be queued up for later use. An incoming event of this type will simply be skipped.         </para></sect2><sect2 id="s3d_get_callback"><title>s3d_get_callback</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>s3d_cb <function>s3d_get_callback</function></funcdef><paramdef>uint8_t <parameter>event</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>Returns the Callback-function of the event.</para><programlisting> struct s3d_evt e;
 ...
 s3d_get_callback(S3D_EVENT_KEY)(e);
 // will call the key-handling function with argument e.
</programlisting><para>         </para></sect2><sect2 id="s3d_process_stack"><title>s3d_process_stack</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>void <function>s3d_process_stack</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
</para><para>This function goes through all function of the event-stack and will call functions. this is useful when you define a new function but still have a lot of events of this type on the stack.</para><para>Deprecated</para><para>This is probably obsolete         </para></sect2><sect2 id="s3d_mcp_focus"><title>s3d_mcp_focus</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_mcp_focus</function></funcdef><paramdef>int <parameter>object</parameter></paramdef></funcprototype></funcsynopsis><para>
</para><para>This is an mcp-only function. It gives focus (for receiving key-strokes etc.) to an app referenced by it's mcp-object-id.         </para></sect2><sect2 id="s3d_net_check"><title>s3d_net_check</title><funcsynopsis><funcsynopsisinfo>#include &lt;s3d.h&gt;</funcsynopsisinfo><funcprototype><funcdef>int <function>s3d_net_check</function></funcdef><paramdef>void</paramdef></funcprototype></funcsynopsis><para>
</para><para>This functions is for programs which do not employ a mainloop, hence they need to check for new events on their own. Programs like these must make sure to call this function from time to time to convince the server that they did not freeze or bail out.         </para></sect2>